[{"category":"Initial Access","value":"Valid Accounts","id":"F-0.4.01.","description":"The adversary may use compromised credentials of existing accounts. Obtained certificates may give increased privileges and provide access to restricted network areas. Not using malware can make detecting the presence of an adversary harder.\nDifferent types of accounts and credentials can be targeted, for example, cloud credentials, default accounts, local accounts, Git repository, CI/CD service, and server hosting Git repository. \n\nSource: https://attack.mitre.org/techniques/T1078/"},{"category":"Execution","value":"User Execution ","id":" F-1.0.01.","description":"The adversary may publish a malicious image in the public repository. Adversaries may try to hide the fact that the image is malicious by matching a legitimate name. Thus users might use the image without realizing that it is malicious. This leads to the execution of code that can be used for starting cryptocurrency mining in the instance or container. \n\nSource: https://attack.mitre.org/techniques/T1204/003/"},{"category":"Persistence","value":"Valid Accounts","id":"F-3.4.01.","description":"The adversary may use compromised credentials of existing accounts. Obtained certificates may give increased privileges and provide access to restricted network areas. Not using malware can make detecting the presence of an adversary harder.\nDifferent types of accounts and credentials can be targeted, for example, cloud credentials, default accounts, local accounts. \n\nSource: https://attack.mitre.org/techniques/T1078/\n"},{"category":"Privilege Escalation","value":"Valid Accounts","id":"F-4.4.15.","description":"The adversary may modify the approver list in Git, given the admin permission on the Git repository service account. This may affect the system if the multi-party approval is not mandatory and the admin list is not limited.\n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Defense Evasion","value":"Valid Accounts","id":"F-5.4.01.","description":"The adversary may use compromised credentials of existing accounts. Obtained certificates may give increased privileges and provide access to restricted network areas. Not using malware can make detecting the presence of an adversary harder.\nDifferent types of accounts and credentials can be targeted, for example, cloud credentials, default accounts, local accounts.\n\nSource: https://attack.mitre.org/techniques/T1078/\n"},{"category":"Credential Access","value":"Unsecured Credentials","id":"F-6.4.01.","description":"The adversary may look for unsecured credentials in the system. Unsecured credentials can be in the configuration files, environmental variables in CI/CD, Kubernetes secrets, plain text files, etc. To get credetials the adversary may attempt listing Kubernetes secrets, accessing Cloud Instance Metadata API, searching a local file history for files with credentials, extracting passwords from backups, and container logs.\n\nSource: https://attack.mitre.org/techniques/T1552/ https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/"},{"category":"Discovery","value":"Network Service Discovery","id":"F-7.0.01.","description":"The adversary may scan network services to discover services running on remote hosts or scan for vulnerabilities. Some of the discovered services may be vulnerable, which can be used for exploitation. An adversary may discover services running on other than a target machine cloud hosts in cloud-based systems. Moreover, if the on-premise environment is connected to the cloud host, the adversary may be able to discover services on the premice host. In the case of containerized systems, the adversary with access to one container can map all networks, as, by default, there are no limitations on pods communication.   \nSource: https://attack.mitre.org/techniques/T1046/ https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/"},{"category":"Lateral Movement","value":"Use Alternate Authentication Material","id":"F-8.0.01.","description":"The adversary may use alternate authentication material to access the target system. For example, web session cookies are commonly used in cloud web applications. Session cookie keeps the user logged in to the application, even when application is not actively used. Thus, the adversary may steal a cookie to bypass the log in and access the data available to the victim user. In containerized environments, secrets, including application credentials, can be stored in the configuration files.\n\nSource: https://attack.mitre.org/techniques/T1550/ https://attack.mitre.org/techniques/T1550/004/ https://attack.mitre.org/techniques/T1550/001/ https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/"},{"category":"Collection","value":"Data from Cloud Storage Object","id":"F-9.1.01.","description":"The adversary may collect information from the cloud data storage that does not have a proper protection level. For example, cloud data storage does not have running applications, and their data can be retrieved via APIs. Commonly the end-users misconfigure such storage, leaving them unproperly secured. Or credentials gathered in the previous steps can be used for accessing storage with access permissions controls. \n\nSource: https://attack.mitre.org/techniques/T1530/"},{"category":"Exfiltration","value":"Transfer Data to Cloud Account","id":"F-10.1.01.","description":"The adversary may exfiltrate data and backups from one cloud account to another within the same cloud provider to avoid detection. This transfer within the same cloud provider can be not monitored, unlike data transfers over external network interfaces. \n\nSource :https://attack.mitre.org/techniques/T1537/"},{"category":"Impact","value":"Data Destruction","id":"F-11.0.01.","description":"The adversary may destroy information in the system to interrupt its availability. This can be achieved by deleting cloud storage, cloud storage accounts, or other infrastructure in the cloud environments. \n\nSource: https://attack.mitre.org/techniques/T1485/"},{"category":"Initial Access","value":"External Remote Services and Sensitive Interfaces","id":"F-0.0.02.","description":"The adversary may access the system via external remote services (e.g., VPNs), which allows them to connect from the remote location to the system. In the case of containerized environments, there are sensitive interfaces that are not meant to be exposed publicly. But sometimes due to misconfigured environments, they can be exposed. As they don't require authentication adversaries can use them to deploy a container or run malicious code. Examples of those interfaces are Docker API, Kubernetes API server, kublet, Kubeflow. \n\nSource: https://attack.mitre.org/techniques/T1133/ https://www.microsoft.com/security/blog/2021/03/23/secure-containerized-environments-with-updated-threat-matrix-for-kubernetes/"},{"category":"Execution","value":"Container Administration Command","id":"F-1.2.02. ","description":"The adversary may compromise the container administration services such as kublet, the Kubernetes API server, and the Docker daemon. This can allow them to remotely manage containers in the environment and execute commands. For example, in Docker, the docker exec can be used to execute commands in the running container. In the Kubernetes, execution of commands can be gained by using kubectl exec, the kublet, the Kubernetes API server, and having a proper access level.\n\nCommand for Kubernetes: \nkubectl exec \n\nTo run a terminal inside the running conainer: \nkubectl exec --stdin --tty <name-of-the-pod>  -- /bin/bash\n\nSource: https://attack.mitre.org/techniques/T1609/ "},{"category":"Persistence","value":"Implant Internal Image","id":"F-3.0.02.","description":"The adversary may implant or backdoor a malicious cloud or container image. For example, the adversary can embed docker images, Google Cloud Platform images, Amazon Machine Images, and Azure images in the user's environment after gaining initial access.  Having access to a compromised cloud environment and listing available images allows an adversary to implant, gor example, a backdoor in the container images. \n\nSource: https://attack.mitre.org/techniques/T1525/"},{"category":"Privilege Escalation","value":"Escape to Host","id":"F-4.2.02.","description":"The adversary may escape from the container to the host environment, which gives them an access to other containers and/or the underlying host. The main cause of this is typically containerized environments that don't have a separation from the host environment. \n\nSource: https://attack.mitre.org/techniques/T1611/  "},{"category":"Defense Evasion","value":"Impair Defenses","id":"F-5.0.02.","description":"The adversary may turn off, exhaust, or block the defensive mechanisms of a target system. Defensive mechanisms include  security tools, cloud firewalls, or cloud logs. Having these mechanisms disabled allows adversaries to avoid detecting malicious activities and system modification. \n\nIn cloud environments, modifying cloud firewall rules allow bypassing limitations on accessing cloud resources. \n\nSource: https://attack.mitre.org/techniques/T1562/  https://attack.mitre.org/techniques/T1562/007/ "},{"category":"Credential Access","value":"Brute Force","id":"F-6.0.02.","description":"The adversary may brute force system credentials to get access to the system. The attacker can perform brute force online by guessing a password to the system and receiving an instant result about their validity, or an offline, by using previously obtained hashes. The adversary may use the knowledge gathered in other steps, such as valid accounts, account and password policy discovery. Having the following data decreases the time needed to brute force valid credentials.\nPassword spraying is one of the common techniques. The attacker uses a list of the most common password that matches a password policy of the environment (if known) and uses it as a possible list of user passwords. Then, to avoid being blocked for too many failed log ins, the attacker can target several accounts in the system. \nAnother common technique is credential stuffing. The adversary may look for leaked credentials on the web and access the system by credential overlap. For example, sometimes users use the same password for personal and professional use (credential overlap), so adversaries may access a target system using a leaked personal password. \nSource: https://attack.mitre.org/techniques/T1110/ https://attack.mitre.org/techniques/T1110/001/ https://attack.mitre.org/techniques/T1110/003/ https://attack.mitre.org/techniques/T1110/004/"},{"category":"Discovery","value":"Permission Groups Discovery","id":"F-7.0.02.","description":"The adversary may try to discover user groups and permissions. Knowledge of user groups and permission settings helps the adversary determine a particular user in the groups and groups and users with elevated permissions. The adversary may gather permission groups through API interfaces in cloud environments, such as Azure CLI and Google Cloud Identity Provider API. \n\nSource: https://attack.mitre.org/techniques/T1069/ https://attack.mitre.org/techniques/T1069/003/"},{"category":"Lateral Movement","value":"Internal Spearphishing","id":"F-8.1.02.","description":"The adversary may exploit a trusted account in the system to perform a phishing attack with a higher likelihood of the target opening it. In this attack, the adversary attempt to capture credentials or spread malware in the system, for example, by using a spearphishing attachment or link. \n\nSource: https://attack.mitre.org/techniques/T1534/"},{"category":"Collection","value":"Data from Information Repositories ","id":"F-9.1.02.","description":"The adversary may retrieve information from  confluence,  code or other repositories. These repositories store a plethora of information and may lead an adversary to a piece of target information.  \n\nSource: https://attack.mitre.org/techniques/T1213/"},{"category":"Exfiltration","value":"Exfiltrate Data over C2 Channel","id":"F-10.1.02.","description":"The adversary may exfiltrate data using existing command and control channels. The data that have to be exfiltrated may be encoded into the communication channels using the same protocol as C2 communicators.  \n\nSource: https://attack.mitre.org/techniques/T1041/"},{"category":"Impact","value":" Denial of Service ","id":"F-11.4.02.","description":"The adversary may perform a Denial-of-Service (DoS) attack to make services unavailable to users. A DoS is an attack that causes a machine or network to be inaccessible to the intended users. There are many possible DoS attack types: Endpoint DoS,  Network DoS, Application DoS, Node scheduling DoS, Service discovery DoS, SOC/SIEM DoS. \n\nSource:  https://attack.mitre.org/techniques/T1498/ https://attack.mitre.org/techniques/T1499/ https://github.com/rung/threat-matrix-cicd https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/"},{"category":"Initial Access","value":"Supply Chain Compromise","id":"F-0.0.03. ","description":"The adversary may exploit the weakest/less secure link in the CI/CD pipeline or application. Mainly targeted areas are exploits on widely used open-source packages, open-source vulnerabilities, compromised CI/CD tools, and changes in the build process as part of an unpatched or malicious supply chain. \n\nIn 2021 suply chain attacks increased by 300% compared to 2020 based on the Aqua \"2021 Software Supply Chain Security Report\".\n\nSource: https://blog.aquasec.com/software-supply-chain-attacks-2021\n "},{"category":"Execution","value":"Deploy Container","id":"F-1.2.03. ","description":"The adversary may deploy a container via Kubernetes dashboard, Kubeflow, and Docker's create and start. The deployed container then can be used to execute malicious commands or download malware. Or to deploy the image with default configurations without network rules and limitations to avoid defense mechanisms of the environment.\n\nSource: https://attack.mitre.org/techniques/T1610/"},{"category":"Persistence","value":"Account Manipulation","id":"F-3.1.03.","description":"The adversary may modify cloud accounts by adding a new set of credentials. Having adversary-controlled credentials in the cloud accounts allows adversaries to have persistent access to the targeted system. For example, one of the ways to accomplish adding an SSH key is in AWS - using ImportKeyPair or CreateKeyPair API, and in GCP -  gcloud compute os-login ssh-keys add command. \n\nSource: https://attack.mitre.org/techniques/T1098/001/"},{"category":"Privilege Escalation","value":"Exploitation for Privilege Escalation","id":"F-4.2.03.","description":"The adversary may perform a privilege escalation to get admin access to the system. In containerized environments, there are a plethora of ways to conduct a privilege escalation, such as listing secrets to get the admin secret, impersonating a privileged group, exploiting the control plane, for example, Kubernetes API server or kublet, to get access to admin secrets.\n\nSource: https://attack.mitre.org/techniques/T1068/\nhttps://blog.lightspin.io/kubernetes-pod-privilege-escalation"},{"category":"Defense Evasion","value":"Modify Cloud Compute Infrastructure","id":"F-5.1.03. ","description":"The adversary may modify cloud compute infrastructure, that can include creating spanshots, creating, deleting and reverting cloud instances. Modifying infrastructure may help an adversary bypass existing access controls or help to remain undetected.\n\nSource: https://attack.mitre.org/techniques/T1578/"},{"category":"Credential Access","value":"Forge Web Credentials","id":"F-7.1.03. ","description":"The adversary may try to discover accounts in the system. Knowledge of usera accounts helps the adversary on the subseguent steps of the attack. In the cloud environments, there are command forlisting user accounts, given a sufficient permission level. In Azure - az ad user list - lists domain users. In AWS - aws iam list-users - lists users in the current account. In GPC - gcloud iam service-accounts list and gcloud projects get-iam-policy  - list service accounts and project users. \n\nSource: https://attack.mitre.org/techniques/T1087/ https://attack.mitre.org/techniques/T1087/004/"},{"category":"Discovery","value":"Account Discovery","id":"F-7.1.03. ","description":"The adversary may try to discover accounts in the system. Knowledge of users accounts helps the adversary in the subsequent steps of the attack. There are commands for listing user accounts in the cloud environments, given a sufficient permission level. For example, Azure - az ad user list - lists domain users. In AWS - aws iam list-users - lists users in the current account. In GPC - gcloud iam service-accounts list and gcloud projects get-iam-policy  - list service accounts and project users. \n\nSource: https://attack.mitre.org/techniques/T1087/ https://attack.mitre.org/techniques/T1087/004/"},{"category":"Lateral Movement","value":"Taint Shared Content","id":"F-8.1.03. ","description":"The adversary may spread payloads by adding them to the internal code repositories or shared storage. Additionally, content can be tainted by adding a malicious part to the legitimate files at the shared locations.  After opening such tainted content, malicious code can be executed on the target platform. \n\nSource: https://attack.mitre.org/techniques/T1080/"},{"category":"Collection","value":"Data Staged","id":"F-9.1.03.","description":"The adversary may stage data in a staging area ( specific location in the system)  before exfiltration it. The adversary can stage data to a particular instance or a virtual machine in cloud environments. \n\nSource: https://attack.mitre.org/techniques/T1074/"},{"category":"Exfiltration","value":"Transfer Data from Git Repository","id":"F-10.3.03. ","description":"The adversary may transfer data from the Git repository if the Git repository does not have network restrictions, use long-life static tokens, does not limit access permissionns of each contributor, and does not have an audit logging. \n\nSource: https://github.com/rung/threat-matrix-cicd "},{"category":"Impact","value":"Resource Hijacking","id":"F-11.0.03. ","description":"The adversary may use the system to solve resource-intensive problems, likely affecting systems availability. The most common use case is to mine cryptocurrencies. Cloud-based systems are a common target for this attack, as they have a high potential of available resources. Containerized environments are also commonly targeted via exposed APIs and scaling possibilities.  \n\nSource: https://attack.mitre.org/techniques/T1496/"},{"category":"Initial Access","value":"Exploit Public-Facing Application","id":"F-0.1.04.","description":"The adversary may try to compromise an application or devise facing the internet to bring unexpected behavior. In cloud baser or containerized environments, it can cause taking advantage of the underlying infrastructure. This makes it possible for adversaries to access container API or container host.  \n\nSource: https://attack.mitre.org/techniques/T1190/"},{"category":"Execution","value":"Scheduled Task/Job","id":"F-1.2.04.","description":"The adversary may compromise job scheduling in containerized environments. It can be used to schedule the deployment of a container that executes malicious code. Container job scheduling works similarly to the Cron Job in Linux, thus performing defined tasks in a designated time. \n\nCronJob in Kubernetes can be used to schedule a specific Job, for example, a Job that executes a malicious code in the pods of a cluster.  \n\nSource: https://attack.mitre.org/techniques/T1053/007/ "},{"category":"Persistence","value":"Create Account","id":"F-3.1.04.","description":"The adversary may create a new account to keep persistent access to the target system. In cloud environments, adversaries can add accounts to a specific service to reduce detection risk.\n\nSource: https://attack.mitre.org/techniques/T1136/003/"},{"category":"Privilege Escalation","value":"Scheduled Task/Job","id":"F-4.2.04.","description":"The adversary may compromise job scheduling in containerized environments. It can be used to schedule the deployment of a container that executes malicious code. Container job scheduling works similarly to the Cron Job in Linux, thus performing defined tasks in a designated time. \n\nCronJob in Kubernetes can be used to schedule a specific Job, for example, a Job that executes a malicious code in the pods of a cluster.  \n\nSource: https://attack.mitre.org/techniques/T1053/007/ "},{"category":"Defense Evasion","value":"Unused/Unsupported Cloud Regions","id":"F-5.1.04.","description":"The adversary may create an unused or unsupported cloud region account to remain undetected. For example, the targeted side might not monitor all geographic service regions closely. Thus, the adversary can act in the unsupported region by compromising an account used to manage cloud instances. Functionality in cloud regions may differ, so the adversary may target an unused cloud region with fewer detection capabilities. \nSource: https://attack.mitre.org/techniques/T1535/"},{"category":"Credential Access","value":"Steal Application Access Token","id":"F-6.0.04.","description":"The adversary may steal an application access token to gain access to the remote system or application. It usually requires action from the user side, as tokens are typically acquired through social engineering. Application access tokens are used in the applications to make requests to the API server on behalf of the user and then to gain access to cloud-based applications. OAuth is a common framework used for access delegation. It issues tokens for granting access to the system to users without sharing user password with a system. An adversary may build a malicious website to steal a target user access token.\n \n\n \nSource: https://attack.mitre.org/techniques/T1528/"},{"category":"Discovery","value":"Cloud Infrastructure Discovery","id":"F-7.1.04.","description":"The adversary may try to discover components of Infrastructure-As-a-Service (IaaS) environments using cloud APIs and CLIs. System components include cloud instances, snapshots, virtual machines, and cloud services. APIs and CLI commands have the capability of requesting information about the infrastructure. For example, AWS - ListBuckets - returns buckets owned by the request sender. GCP Cloud SDK CLI - has commands for listing project Google Compute Engine instances. CLI in Azure has commands for displaying details of virtual machines. The adversary can use the gathered information for planning the next attack steps. \n\nSource: https://attack.mitre.org/techniques/T1580/"},{"category":"Lateral Movement","value":"Writable Volume Mounts on the Host","id":"F-8.2.04.","description":"The adversary may escape from the exploited container to the underlying system by creating a container with a  writable hostPath volume, that later can be used for escapint to the host. \n\nSource: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/"},{"category":"Collection","value":"Images from a Private Registry","id":"F-9.2.04.","description":"The adversary may \n\nSource:"},{"category":"Exfiltration","value":"Exfiltrate Data in Production Environment","id":"F-10.3.04.","description":"The adversary may exfiltrate data in the production environment using stolen credentials. This technique is possible when the production environment does not have audit logging or security monitoring and does not use principles or the least privilege. \n\nSource: https://github.com/rung/threat-matrix-cicd "},{"category":"Impact","value":"Data Encrypted for Impact","id":"F-11.1.04.","description":"The adversary may encrypt the data of the system to impact its availability and remove the decryption key from the system. This is usually done to request monetary compensation in exchange for the decryption of the information. In the case of cloud environments, storage objects that belong to compromised accounts can be encrypted. \n\nSource: https://attack.mitre.org/techniques/T1486/"},{"category":"Initial Access","value":"Compromised Images in Registry","id":"F-0.2.05.","description":"The adversary may attempt to add a compromised image to the private registry given its access. Or they can add compromised images to a public register, like Docker Hub, and expect the user to use an untrusted image. \n\nSource: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/ "},{"category":"Execution","value":"SSH Server ","id":"F-1.2.05.","description":"The adversary may compromise the running SSH server inside on container. Having legitimate credentials gained by phishing or brute-forcing, an adversary may remotely access a container. \n\nSource: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/"},{"category":"Persistence","value":"External Remote Services","id":"F-3.2.05.","description":"The adversary may access the system via external remote services (e.g., VPNs), which allows them to connect from the remote location to the system. In the case of containerized environments, there are sensitive interfaces that are not meant to be exposed publicly. But sometimes due to misconfigured environments, they can be exposed. As they don't require authentication adversaries can use them to deploy a container or run malicious code. Examples of those interfaces are Docker API, Kubernetes API server, kublet, Kubeflow. \n\nSource: https://attack.mitre.org/techniques/T1133/ https://www.microsoft.com/security/blog/2021/03/23/secure-containerized-environments-with-updated-threat-matrix-for-kubernetes/\n"},{"category":"Privilege Escalation","value":"Privilleged Container","id":"F-4.2.05.","description":"The adversary may get access to or deploy a privileged container. A privileged container has permission to do a wide variety of actions on the host. Thus, by gaining access to it, the adversary may modify the host and get access to the admin information and resources and the containers located on the same host. \n\nSource: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/\nhttps://cloud.redhat.com/blog/protecting-kubernetes-against-mitre-attck-privilege-escalation?extIdCarryOver=true&sc_cid=7013a000002pdO9AAI"},{"category":"Defense Evasion","value":"Use Alternate Authentication Material","id":"F-5.0.05.","description":"The adversary may use alternate authentication material to access the target system. For example, web session cookies are commonly used in cloud web applications. Session cookie keeps the user logged in to the application, even when application is not actively used. Thus, the adversary may steal a cookie to bypass the log in and access the data available to the victim user. \n\nSource: https://attack.mitre.org/techniques/T1550/ https://attack.mitre.org/techniques/T1550/004/ https://attack.mitre.org/techniques/T1550/001/"},{"category":"Credential Access","value":"Steal Web Session Cookie","id":"F-6.1.05.","description":"The adversary may steal a web session cookie to access systems and applications without the need for credentials. Session cookies keep a user authenticated to a website. Here cookie is an authentication token after they complete the first authentication. Session cookie stays valid even when the user is not actively using the application. It can be found in various locations as a disk or network traffic or can be stolen using malware on a local system web browser or collected on the proxy. After stealing a web session cookie, the adversary can use it to authenticate a target system as alternate authentication material (F-5.1.05.). \nSource: https://attack.mitre.org/techniques/T1539/"},{"category":"Discovery","value":"Cloud and Container Service Dashboard","id":"F-7.1.05.","description":"The adversary may use cloud or container service account dashboard GUI, accessing it with stolen credentials, to discover information about the system. Such information may include services, resources, and features of the system. The advantage of an enumeration system using GUI rather than API is that the adversary doesn't have to make any API requests. \n\nSource: https://attack.mitre.org/techniques/T1538/ https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/"},{"category":"Lateral Movement","value":"CoreDNS Poisoning","id":"F-8.2.05.","description":"The adversary may change configurations of the DNS server of the cluster and get access to information about other services in the network. CoreDNS is a main Domain Name System (DNS) used in Kubernetes. The configuration file of CoreDNS is corefile. In Kubernetes, it is stored in the ConfigMap object. \n\nSource: https://www.microsoft.com/security/blog/2021/03/23/secure-containerized-environments-with-updated-threat-matrix-for-kubernetes/"},{"category":"Collection","value":"Automated Collection","id":"F-9.1.05.","description":"The adversary may collect internal data using automatic data gathering techniques. The adversary may use cloud APIs, command-line interfaces, or transform services to collect information in the cloud environments automatically. \n\nSource: https://attack.mitre.org/techniques/T1119/"},{"category":"Impact","value":"Defacement","id":"F-11.1.05.","description":"The adversary may change the visual content of internal or external enterprise resources, which affects the integrity of the system. It is usually done to spread misleading, or false information.\n\nSource: https://attack.mitre.org/techniques/T1491/"},{"category":"Initial Access","value":"Kubeconfig File","id":"F-0.1.06. ","description":"The adversary may access a kubeconfig file that is exfiltrated, uploaded to the wrong place, or via the compromised client. Having a kubeconfig file gives adversary details about the cluster, such as credentials. Thus, it can be used for accessing the cluster.\n\nSource: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/ "},{"category":"Execution","value":"Sidecar Injection","id":"F-1.2.06.","description":"The adversary may inject a sidecar container in the legitimate pod of the cluster to avoid adding a new pod. In Kubernetes pod is one or a group of containers in the shared network. A sidecar container is a container that exists next to the main container in the pod. \n\nSource: https://www.microsoft.com/security/blog/2021/03/23/secure-containerized-environments-with-updated-threat-matrix-for-kubernetes/ "},{"category":"Persistence","value":"Scheduled Task/Job","id":"F-3.2.06.","description":"The adversary may compromise job scheduling in containerized environments. It can be used to schedule the deployment of a container that executes malicious code. Container job scheduling works similarly to the Cron Job in Linux, thus performing defined tasks in a designated time.\n \nCronJob in Kubernetes can be used to schedule a specific Job, for example, a Job that executes a malicious code in the pods of a cluster.  \n\nSource: https://attack.mitre.org/techniques/T1053/007/ \n"},{"category":"Privilege Escalation","value":"Cluster-Admin Binding","id":"F-4.2.06.","description":"The adversary may create a binding to the privileged or admin role if they gain permission to create bindings. A role binding allows to give permissions specific to the role to the user or group of users and is an initial part of Role-based access control (RBAC) in Kubernetes.   \n\nSources: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/\nhttps://cloud.redhat.com/blog/protecting-kubernetes-against-mitre-attck-privilege-escalation?extIdCarryOver=true&sc_cid=7013a000002pdO9AAI\nhttps://kubernetes.io/docs/reference/access-authn-authz/rbac/"},{"category":"Defense Evasion","value":"Build Image on Host","id":"F-5.2.06.","description":"The adversary may build a custom container image on the host using Docker API to trigger the build. As a base image, the adversary may use a  vanila image from the public registry to pass the malicious image check. Vanilla image is not customised base image. In the case of the image from the private registry, it will pass the image check, too, as images from the private registries are trusted. Thus, an adversary may build a custom image with malware gathered from a command-and-control(C2) server, or other locations. The C2 server is a device that an attacker controls, and is used to establish communication with a target system within the network.\nSources: https://attack.mitre.org/techniques/T1612/"},{"category":"Credential Access","value":"Access Container Service Account","id":"F-5.2.06.","description":"The adversary may exploit the service account(SA) token to perform actions in the cluster. The service account is a Kubernetes application identity. Every created pod has a service account, and if the Role-based access control (RBAC) is disabled SA has unlimited access rights. \n\nSource: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/"},{"category":"Discovery","value":"Cloud Service Discovery","id":"F-7.1.06.","description":"The adversary may try to discover cloud services in the system. These services are different among different cloud shared responsibility models, such as  Infrastructure-As-a-Service (IaaS), Platform-As-a-Service (PaaS), Software-As-a-Service (SaaS). The adversary may attempt to enumerate services, including policies, applications, and resources. \n\nSource: https://attack.mitre.org/techniques/T1526/"},{"category":"Lateral Movement","value":"ARP Poisoning and IP Spoofing","id":"F-8.2.06.","description":"The adversary may perform an ARP Poisoning and IP Spoofing, for example, spoof traffic of other pods.  The cross pod traffic is typically based on the bridges, a level 2 component, ARP poisoning, is possible in containerized environments.  \n\nSource: https://www.microsoft.com/security/blog/2021/03/23/secure-containerized-environments-with-updated-threat-matrix-for-kubernetes/"},{"category":"Impact","value":"PII or IP Exfiltration","id":"F-11.2.06.","description":"(cluster or cloud datastores, local accounts)\nThe adversary may \n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Initial Access","value":"Compromise User Endpoint","id":"F-0.2.07.","description":"(2FA and federating auth mitigate)\nThe adversary may \n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Execution","value":"Application Exploit (RCE)","id":"F-1.2.07.","description":"The adversary may \n\nSource:"},{"category":"Persistence","value":"Host Mount","id":"F-2.2.07.","description":"The adversary may mount a file or folder to a target container using hostPath volume. It's used to mount a file/folder from a host machine to a container and can be exploited by adversaries to get persistent access to the host machine. \n\nSource: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/"},{"category":"Privilege Escalation","value":"Access Cloud Resources","id":"F-3.2.07.","description":"(metadata attack via workload identity)\nThe adversary may leverage the access from a container to the other cloud resources. The adversary can access the service principal file(used to create and manage resources), steal its credentials, and utilize them to modify or view cloud resources. \nSource: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/"},{"category":"Defense Evasion","value":"Indicator Removal on Host ","id":"F-4.2.07.","description":"The adversary may delete log files or other data that contain signs of adversary presence in the system. This may include clearing container logs, deleting Kubernetes events, etc. Such an activity affects the integrity of the system, as due to the lack of log data, events remain unreported. It also affects the incidence detection, as a lack of data prevents the correct logs correlation from indicating the malicious activity in the system. \n\nSource: https://attack.mitre.org/techniques/T1070/"},{"category":"Credential Access","value":"Admission Controller","id":"F-5.2.07.","description":"The adversary may use a malicious admission controller for credential access. An admission controller modifies and intercepts requests to the Kubernetes API server. There are two types of admission controllers - validating and mutating. Mutating modify intercepted requests(generic controller - MutatingAdmissionWebhook). The user defines the behavior of the admission controller using a webhook in the cluster. Thus, the adversary can use a malicious webhook to intercept sensitive information that API server requests may contain. \n\nSource: https://www.microsoft.com/security/blog/2021/03/23/secure-containerized-environments-with-updated-threat-matrix-for-kubernetes/ "},{"category":"Discovery","value":"Cloud Storage Object Discovery","id":"F-6.1.07.","description":"The adversary may discover cloud storage and its objects. Having information about cloud storage is helpful in the consequent steps of the attack, as for accessing all or specific information from the storage. Cloud service providers provide APIs for listing objects from cloud storage. In AWS - ListObjectsV2, in Azure - List Blobs.\n\nSource: https://attack.mitre.org/techniques/T1619/"},{"category":"Lateral Movement","value":"Container Service Account","id":"F-7.2.07.","description":"The adversary may exploit the service account token to perform actions in the cluster. The service account (SA) is a Kubernetes application identity. Every created pod has a service account, and if the Role-based access control (RBAC) is disabled SA has unlimited access rights.  \n\nSource: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/"},{"category":"Impact","value":"Account Access Removal","id":"F-11.1.07.","description":"The adversary may remove access to the legitimate user accounts, causing the interuption of the system avilability. Accounts can be deleted, changed or locked.  \n\nSource: https://attack.mitre.org/techniques/T1531/"},{"category":"Initial Access","value":"Compromised Host","id":"F-0.2.08.","description":"The adversary may compromise a host utilizing credentials leak, stuffing, or by performing a supply chain compromise, thus using the least secured link in the system, such as unpatched services.\n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Execution","value":"Container Lifecycle Hooks","id":"F-1.2.08.","description":"The adversary may add container lifecycle hooks to a pod by editing a pod YAML file and adding postStart and preStop events. Those events can contain a malicious script.  Logs of the Hook handler are not exposed to Pod events. \n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Persistence","value":" Backdoor Container","id":"F-2.2.08.","description":"The adversary may use Kubernetes controllers (Deployments or DaemonSets) to have a constantly running container in the cluster, that can execute a malicious code. \n\nSource: https://cloud.redhat.com/blog/protecting-kubernetes-against-mitre-attck-persistence?extIdCarryOver=true&sc_cid=7013a000002pdO9AAI \nhttps://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/"},{"category":"Privilege Escalation","value":"Pod hostPath Mount","id":"F-3.2.08.","description":"(logs to container breakout)\nThe adversary may \n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Defense Evasion","value":"Masquerading","id":"F-4.2.08.","description":"The adversary may change/manipulate the name or metadata of a file/object. Masquerading is used to evade detection. It takes place when malicious files/objects are modified to look legitimate by changing the name and defining a different file type so that the user will misidentify it. Legitimate location can also be matched when applicable. \n\nIn containerized environments, the adversary may exploit pod/container name similarity. In the case of pods created by controllers, for example, Deployment, they have a random suffix in the name and an unrandom part. So, the adversary can create a pod that will emulate the look of the legitimate pod by using a known part and adding a randomized suffix.  \nSource: https://attack.mitre.org/techniques/T1036/ https://attack.mitre.org/techniques/T1036/005/ https://www.microsoft.com/security/blog/2021/03/23/secure-containerized-environments-with-updated-threat-matrix-for-kubernetes/"},{"category":"Credential Access","value":"Credential Access in Admin Console ","id":"F-5.3.08.","description":"The adversary may get credentials from CI/CD admin console, if credentials from it are exposed. \n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Discovery","value":"System Network Connections Discovery","id":"F-6.1.08. ","description":"The adversary may try to discover network connections from and to the target system. In the case of cloud environments, listing  Virtual Private Clouds or Virtual Networks lead to the discovery of connected systems and services. \n\nSource: https://attack.mitre.org/techniques/T1049/"},{"category":"Lateral Movement","value":"Access Cloud Resources","id":"F-7.2.08.","description":"(workload identity and cloud integrations)\nThe adversary may leverage the access from a container to the other cloud resources. The adversary can access the service principal file(used to create and manage resources), steal its credentials, and utilize them to modify or view cloud resources. \n\nSource: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/"},{"category":"Initial Access","value":"Compromised etcd","id":"F-0.3.09.","description":"(missing auth)\nThe adversary may \n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Execution","value":"Remote Services","id":"F-1.3.09.","description":"The adversary may use an SSH to connect to the CI/CD pipeline. If CI/CD pipeline has allowed SSH access and the adversary gained valid credentials, the adversary can access the CI/CD pipeline servers. \n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Persistence","value":"Static Pods","id":"F-2.2.09.","description":"(reverse shell, shadow API server to read audit-log-only headers)\nThe adversary may \n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Privilege Escalation","value":"Node to Cluster Escalation","id":"F-3.2.09.","description":"(stolen credentials, node label rebinding attack)\nThe adversary may \n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Defense Evasion","value":"RootKit","id":"F-4.2.09.","description":"The adversary may execute rootkit after mounting /mnt and gaining access to the host with chroot. \nA rootKit is “a set of programs which patch and trojan existing execution paths within the system”, defined by Greg Hoglund (NT Rootkit author). The rootkit is used to evade detection and get privileged access to the system. The adversary may use LD_PRELOAD to match names of malicious libraries to libraries on the target system, so they are loaded during the program execution.  \n    \nSource: https://info.aquasec.com/cloud-native-threats-aqua https://books.google.fi/books?hl=en&lr=&id=hODFCgAAQBAJ&oi=fnd&pg=PR5&dq=HAnDBOOK+OF+SECURITY+AnD+nETWORKS&ots=H4akui-F1U&sig=jf5Moo9F-mr4xNfCj_pZAQVMz6k&redir_esc=y#v=onepage&q=HAnDBOOK%20OF%20SECURITY%20AnD%20nETWORKS&f=false https://attack.mitre.org/techniques/T1574/006/"},{"category":"Credential Access","value":"Multi-Factor Authentication Request Generation","id":"F-5.1.09.","description":"The adversary may bypass the multi-factor authentication (MFA) and access the profile of the user by generating MFA requests. For example, the adversary may send many MFA requests to the user, hoping that the user will accept one of the received authentication requests. \n\nSource: https://attack.mitre.org/techniques/T1621/"},{"category":"Discovery","value":"Password Policy Discovery","id":"F-6.1.09.","description":"The adversary may discover details about the password policy of the system. Knowing password policies makes it possible to build more efficient brute force or dictionary  attacks that comply with the system password requirements. In cloud environments, requestion password policies are possible via corresponding APIs, for example, in AWS - GetAccountPasswordPolicy. \n\nSource: https://attack.mitre.org/techniques/T1201/"},{"category":"Lateral Movement","value":"Cluster Internal Networking ","id":"F-7.2.09.","description":"The adversary may attack other containers in the cluster utilizing allowed network traffic between pods. To perform this technique, an adversary have to have access to at least one container in the cluster. . \n\nSource: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/"},{"category":"Initial Access","value":"K8s API Server Vulnerability","id":"F-0.2.10.","description":"(needs CVE and unpatched API server)\nThe adversary may \n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Execution","value":"CI/CD Configuration","id":"F-1.3.10.","description":"The adversary may modify CI/CD configurations. When CI/CD configurations on the Git repository are allowed without review, Git allows pushing unsigned commits,  or there is no signature to CI/CD configurations, an adversary can change configurations. Weak audit login can help them remain undetected. \n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Persistence","value":"Rewrite Container Lifecycle Hooks","id":"F-2.2.10.","description":"(postStart and preStop events in pod YAML)\nThe adversary may modify container lifecycle hooks to a pod by editing a pod YAML file and changeing postStart and preStop events. Those events can contain a malicious script.  Logs of the Hook handler are not exposed to Pod events. \n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Privilege Escalation","value":"Control Plane to Cloud Escalation","id":"F-3.2.10.","description":"(keys in Secrets, cloud or control plane credentials)\nThe adversary may \n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Defense Evasion","value":"Connect from Proxy Server","id":"F-4.2.10.","description":"(to cover source IP, external to cluster)\nThe adversary may \n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Credential Access","value":"Network Sniffing","id":"F-5.1.10.","description":"The adversary may perform network sniffing of the traffic to get information about the system, users, and authentication details. Network sniffing is monitoring wireless or wired networks to record data. User credentials are one of the biggest targets, especially when transmitted using unencrypted protocols. The adversary may also discover system configurations that are helpful for the consequent attack steps. In the cloud environments, the adversary may utilize AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap to record traffic.\n\nSource: https://attack.mitre.org/techniques/T1040/"},{"category":"Discovery","value":"Software Discovery","id":"F-6.1.10.","description":"The adversary may enumerate software used in the system. Special attention usually is paid to the security software, such as defensive tools, sensors, configurations, and firewall rules. Having information about security tools and configuration in the system helps an adversary shape the next attack steps. In cloud environments, the adversary can request the configuration via corresponding APIs. For example to request information about firewalls , in GCP - gcloud compute firewall-rules, in AWS - list-firewall-configs. \n\nSource: https://attack.mitre.org/techniques/T1518/ https://attack.mitre.org/techniques/T1518/001/"},{"category":"Lateral Movement","value":"Access Kubernetes Operator","id":"F-7.2.10.","description":"The adversary may \n\nSource:"},{"category":"Execution","value":"Production Environment Configuration","id":"F-1.3.11.","description":"The adversary may modify the configuration of the production environment by having valid credentials. For example, when credentials in the system are not rotated regularly and don't follow the least privilege principle, compromising a secret manager and stealing credentials adversary can modify the production environment. \n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Persistence","value":"Rewrite Liveness Probes","id":"F-2.2.11.","description":"(exec into and reverse shell in container)\nThe adversary may \n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Privilege Escalation","value":"Compromise Admission Controller","id":"F-3.2.11.","description":"(reconfigure and bypass to allow blocked image with flag)\nThe adversary may \n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Defense Evasion","value":"Dynamic Resolution (DNS)","id":"F-4.2.11.","description":"(DNS tunneling/exfiltration)\nThe adversary may \n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Discovery","value":"System Information Discovery","id":"F-6.1.11.","description":"The adversary may perform a system information discovery. System information may consist of details about the operation system, hardware, architecture, versions, patches, etc. The adversary may use the gathered information to plan the next steps of the attack and exclude specific actions. In cloud environments, the adversary can request the configuration via corresponding APIs. \n\nSource: https://attack.mitre.org/techniques/T1082/"},{"category":"Lateral Movement","value":"Privilege Escalation in CI/CD ","id":"F-7.3.11.","description":"The adversary may escalate privilages from the CI/CD environment to other components of the system, if CI/CD pipeline is not isolated from other systems. \n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Execution","value":"Supply Chain Compromise on CI/CD","id":"F-1.3.12.","description":"The adversary may exploit the weakest/less secure link in the CI/CD pipeline. Mainly targeted areas are exploits on widely used open-source packages, open-source vulnerabilities, compromised CI/CD tools, and changes in the build process.  \n\nIn 2021 suply chain attacks increased by 300% compared to 2020 based on the Aqua \"2021 Software Supply Chain Security Report\".\n\nSource: https://blog.aquasec.com/software-supply-chain-attacks-2021\n \n"},{"category":"Persistence","value":"Shadow Admission Control or API Server","id":"F-2.2.12.","description":"(privileged RBAC, reverse shell)\nThe adversary may \n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Privilege Escalation","value":"Compromise K8s Operator","id":"F-3.2.12.","description":"(compromise flux and read any Secrets)\nThe adversary may \n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Defense Evasion","value":"Shadow Admission Control or API Server","id":"F-4.2.12.","description":"The adversary may \n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Discovery","value":"Container and Resource Discovery","id":"F-6.2.12.","description":"The adversary may try to discover information about containers and components of containerized environments, such as pods, deployments, images, etc. The following information can be viewed via web interfaces, such as the Kubernetes dashboard, or requested viaDoker or Kubernetes APIs. Logs in the case of Docker may contain information about containers, and the adversary may utilize it. The attacker uses information about containers to plan the next attack steps and exclude specific actions.\n\nSource: https://attack.mitre.org/techniques/T1613/"},{"category":"Lateral Movement","value":"Remote Services Exploitation","id":"F-8.3.12.","description":"The adversary may escalate privileges from the CI/CD environment to other components of the system, if CI/CD pipeline is not isolated from other systems. \n\nSource: https://github.com/rung/threat-matrix-cicd "},{"category":"Execution","value":"Modify Production Environment","id":"F-1.3.13.","description":"The adversary may deploy modified applications or server images in the production environment by having valid credentials. For example, when credentials in the system are not rotated regularly and don't follow the least privilege principle, compromising a secret manager and stealing credentials, the adversary can deploy modified applications or container images, functions, and VM images to the production environment. \n\nSource: https://github.com/rung/threat-matrix-cicd\n"},{"category":"Persistence","value":"K3d Botnet","id":"F-2.2.13.","description":"(secondary cluster running on compromised nodes)\nThe adversary may \n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Privilege Escalation","value":"Container Breakout","id":"F-3.2.13.","description":"(kernel or runtime vulnerability e.g., DirtyCOW, `/proc/self/exe`, eBPF verifier bugs, Netfilter)\nThe adversary may \n\nSource: Hacking Kubernetes\nBy Andrew Martin, Michael Hausenblas.  https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/"},{"category":"Defense Evasion","value":"Implant CI/CD Runner Image","id":"F-4.3.13.","description":"The adversary may implant a malicious container image into CI/CD pipeline to achieve persistence. Weak audit login can help an adversary remain undetected. \n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Discovery","value":"Instance Metadata API ","id":"F-6.2.13.","description":"The adversary may request information about the underlying node via instance metadata API, holding sufficient access in the system. The instance metadata APIs retrieves information about the instance, such as SSH public keys, network configurations, etc. \n\nSource: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/"},{"category":"Execution","value":"Injection to IaC Configuration, to Source Code, Bad Dependency","id":"F-1.3.14.","description":"The adversary may inject code to IaC configuration, inject source code, or a bad dependency. For example, in the CI stage adversary can change the application to execute a test code on Ci if the policy of code doesn't restrict a dangerous code. Adversaries can inject bad dependency if untrusted libraries and tools are not restricted. And an adversary can inject code to IaC (Infrastructure as code), that is defines as using machine-readable files to manage data centers. For example, via Terraform as it allows code execution and adding of files. \n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Persistence","value":"Implant CI/CD Runner Image","id":"F-2.3.14.","description":"The adversary may implant a malicious container image into CI/CD pipeline to achieve persistence. Weak audit login can help an adversary remain undetected. \n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Privilege Escalation","value":"Privilege Escalation in CI/CD","id":"F-3.3.14.","description":"The adversary may escalate privilages from the CI/CD environment to other components of the system, if CI/CD pipeline is not isolated from other systems. \n\nSource: https://github.com/rung/threat-matrix-cicd "},{"category":"Defense Evasion","value":"CI/CD Caches","id":"F-4.3.14.","description":"The adversary may modify caches on the CI/CD pipeline by injecting malicious code. TNot cleaning the environment after each pipeline run increases the probability of the attack.\n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Discovery","value":"Access the Kubernetes or Kubelet API","id":"F-6.2.14.","description":"The adversary may retrieve information about the cluster by probing the Kubernetes API server or about nodes via Kubelet API. Kubernetes API server can perform actions by sending requests to RESTful API. The adversary can request information about the cluster via it. On the other hand, Kubelet API is an agent running on each node responsible for correct pod execution. Having access to the network on the host allows the attacker to retrieve information about nodes. \n\nSource: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/"},{"category":"Persistence","value":"Compromise CI/CD Server","id":"F-2.3.15.","description":"The adversary may compromise CI/CD server from a pipeline, espesially if the enviroment created on the pipeline run is not cleaned up after every run. \n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Defense Evasion","value":"Implant Approver in CI/CD","id":"F-4.3.15.","description":"The adversary may modify the approver list in Git, given the admin permission on the Git repository service account. This may affect the system if the multi-party approval is not mandatory, and/or the admin list is not limited.\n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Discovery","value":"Compromise Kubernetes Operator","id":"F-6.2.15.","description":"(sensitive RBAC)\nThe adversary may \n\nSource:"},{"category":"Persistence","value":"CI/CD Configuration","id":"F-2.3.16.","description":"The adversary may modify CI/CD configurations. When CI/CD configurations on the Git repository are allowed without review, Git allows pushing unsigned commits,  or there is no signature to CI/CD configurations, an adversary can change configurations. Weak audit login can help them remain undetected. \n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Defense Evasion","value":"Bypass Review","id":"    ","description":""},{"category":"Discovery","value":"Access Host Filesystem","id":"F-6.2.16.","description":"(host mounts)\nThe adversary may \n\nSource:"},{"category":"Persistence","value":"Injection to IaC Configuration, to Source Code, Bad Dependency","id":"F-2.3.17.","description":"The adversary may inject code to IaC configuration, inject source code, or a bad dependency. For example, in the CI stage adversary can change the application to execute a test code on Ci if the policy of code doesn't restrict a dangerous code. Adversaries can inject bad dependency if untrusted libraries and tools are not restricted. And an adversary can inject code to IaC (Infrastructure as code), that is defines as using machine-readable files to manage data centers. For example, via Terraform as it allows code execution and adding of files. \n\nSource: https://github.com/rung/threat-matrix-cicd\n"},{"category":"Defense Evasion","value":"Access Secret Manager","id":"F-4.3.17.","description":"The adversary may access a secret manager using credentials from a different repository. This is possible when different workloads have access to the same secret manager. The secret manager in CI/CD pipeline is secure storage for sensitive data, like passwords, API keys, and certificates. \n\nSource: https://github.com/rung/threat-matrix-cicd https://cloud.google.com/secret-manager"},{"category":"Discovery","value":"Network Sniffing","id":"F-6.1.17.","description":"The adversary may perform network sniffing of the traffic to get information about the system, users, and authentication details. Network sniffing is monitoring wireless or wired networks to record data. User credentials are one of the biggest targets, especially when transmitted using unencrypted protocols. The adversary may also discover system configurations that are helpful for the consequent attack steps. In the cloud environments, the adversary may utilize AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap to record traffic.\n\nSource: https://attack.mitre.org/techniques/T1040/"}]