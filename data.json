[{"category":"Initial Access","value":"Valid Accounts. Sub: Cloud Credentials, Default Accounts, Local Accounts, Git Repository, CI/CD Servise, Server Hosting Git Repository. ","id":"F-0.4.01.","description":"The adversary may use compromised credentials of existing accounts. Obtained certificates may give increased privileges and provide access to restricted network areas. Not using malware can make detecting the presence of an adversary harder. \n\nSource: https://attack.mitre.org/techniques/T1078/"},{"category":"Execution","value":"User Execution (Malicious Image)","id":" F-1.0.01.","description":"The adversary may publish a malicious image in the public repository. Adversaries may try to hide the fact that the image is malicious by matching a legitimate name. Thus users might use the image without realizing that it is malicious. This leads to the execution of code that can be used for starting cryptocurrency mining in the instance or container. \n\nSource: https://attack.mitre.org/techniques/T1204/003/"},{"category":"Persistence","value":"Valid Accounts. Sub: Default Accounts, Local Accounts, Cloud Accounts. ","id":"F-3.4.01.","description":"The adversary may use compromised credentials of existing accounts. Obtained certificates may give increased privileges and provide access to restricted network areas. Not using malware can make detecting the presence of an adversary harder. \n\nSource: https://attack.mitre.org/techniques/T1078/\n"},{"category":"Privilege Escalation","value":"Valid Accounts. Sub: Default Accounts, Local Accounts, Cloud Accounts, Credential for Deployment(CD) on CI stage.","id":"F-4.0.01.","description":"The adversary may use compromised credentials of existing accounts. Obtained certificates may give increased privileges and provide access to restricted network areas. Not using malware can make detecting the presence of an adversary harder. \n\nSource: https://attack.mitre.org/techniques/T1078/\n"},{"category":"Defense Evasion","value":"Valid Accounts. Sub: Default Accounts, Local Accounts, Cloud Accounts. ","id":"F-5.0.01.","description":"The adversary may use compromised credentials of existing accounts. Obtained certificates may give increased privileges and provide access to restricted network areas. Not using malware can make detecting the presence of an adversary harder. \n\nSource: https://attack.mitre.org/techniques/T1078/\n"},{"category":"Credential Access","value":"Unsecured Credentials. Sub: List Kubernetes secrets Application credentials in configuration files, Read credentials file, Dumping Env Variables in CI/CD ","id":"F-6.4.01.","description":""},{"category":"Discovery","value":"Network Service Scanning (Network mapping )","id":"F-7.0.01.","description":""},{"category":"Lateral Movement","value":"Use Alternate Authentication Material. Sub: Applications credentials in configuration files. ","id":"F-8.0.01.","description":""},{"category":"Collection","value":"Data from Cloud Storage Object","id":"F-9.1.01.","description":""},{"category":"Exfiltration","value":"Transfer Data to Cloud Account","id":"F-10.1.01.","description":""},{"category":"Impact","value":"Data Destruction","id":"F-11.0.01.","description":""},{"category":"Initial Access","value":"External Remote Services and Sensitive Interfaces","id":"F-0.0.02.","description":"The adversary may access the system via external remote services (e.g., VPNs), which allows them to connect from the remote location to the system. In the case of containerized environments, there are sensitive interfaces that are not meant to be exposed publicly. But sometimes due to misconfigured environments, they can be exposed. As they don't require authentication adversaries can use them to deploy a container or run malicious code. Examples of those interfaces are Docker API, Kubernetes API server, kublet, Kubeflow. \n\nSource: https://attack.mitre.org/techniques/T1133/ https://www.microsoft.com/security/blog/2021/03/23/secure-containerized-environments-with-updated-threat-matrix-for-kubernetes/"},{"category":"Execution","value":"Container Administration Command","id":"F-1.2.02. ","description":"The adversary may compromise the container administration services such as kublet, the Kubernetes API server, and the Docker daemon. This can allow them to remotely manage containers in the environment and execute commands. For example, in Docker, the docker exec can be used to execute commands in the running container. In the Kubernetes, execution of commands can be gained by using kubectl exec, the kublet, the Kubernetes API server, and having a proper access level.\n\nSource: https://attack.mitre.org/techniques/T1609/ "},{"category":"Persistence","value":"Implant Internal Image","id":"F-3.0.02.","description":"The adversary may implant or backdoor a malicious cloud or container image. For example, the adversary can embed docker images, Google Cloud Platform images, Amazon Machine Images, and Azure images in the user's environment after gaining initial access.  Having access to a compromised cloud environment and listing available images allows an adversary to implant a backdoor in the container images. \n\nSource: https://attack.mitre.org/techniques/T1525/"},{"category":"Privilege Escalation","value":"Escape to Host","id":"F-4.2.02.","description":"The adversary may escape from the container to the host environment, which gives them an access to other containers and/or the underlying host. The main cause of this is typically containerized environments that don't have a separation from the host environment. \n\nSource: https://attack.mitre.org/techniques/T1611/  "},{"category":"Defense Evasion","value":"Impair Defenses. Sub: Disable or Modify Tools, Disable or Modify Cloud Firewall, Disable Cloud Logs.","id":"F-5.0.02.","description":"The adversary may turn off, exhaust, or block the defensive mechanisms of a target system. Defensive mechanisms include firewalls, audit logs, and security tools. Having these mechanisms disabled allows adversaries to avoid detecting malicious activities and system modification. \n\nIn cloud environments, modifying cloud firewall rules allow bypassing limitations on accessing cloud resources. \n\nSource: https://attack.mitre.org/techniques/T1562/  https://attack.mitre.org/techniques/T1562/007/ "},{"category":"Credential Access","value":"Brute Force","id":"F-6.0.02.","description":""},{"category":"Discovery","value":"Permission Groups Discovery","id":"F-7.0.02.","description":""},{"category":"Lateral Movement","value":"Internal Spearphishing","id":"F-8.1.02.","description":""},{"category":"Collection","value":"Data from Information Repositories (Confluence,\r\nCode Repositories)","id":"F-9.1.02.","description":""},{"category":"Exfiltration","value":"Exfiltrate data over C2 Channel","id":"F-10.1.02.","description":""},{"category":"Impact","value":" Denial of Service. Endpoint DoS,  Network DoS, Application DoS, Node scheduling DoS, Service discovery DoS, Container pull rate limit, SOC/SIEM ","id":"F-11.4.02.","description":""},{"category":"Initial Access","value":"Supply Chain Compromise. Sub:  on CI/CD, Application vulnerability (supply chain unpatched or malicious).","id":"F-0.0.03. ","description":"The adversary may exploit the weakest/less secure link in the CI/CD pipeline. Mainly targeted areas are exploits on widely used open-source packages, open-source vulnerabilities, compromised CI/CD tools, and changes in the build process.  \n\nIn 2021 suply chain attacks increased by 300% compared to 2020 based on the Aqua \"2021 Software Supply Chain Security Report\".\n\nSource: https://blog.aquasec.com/software-supply-chain-attacks-2021\n "},{"category":"Execution","value":"Deploy Container","id":"F-1.2.03. ","description":"The adversary may deploy a container via Kubernetes dashboard, Kubeflow, and Docker's create and start. The deployed container then can be used to execute malicious commands or download malware. Or to deploy the image with default configurations without network rules and limitations to avoid defense mechanisms of the environment.\n\nSource: https://attack.mitre.org/techniques/T1610/"},{"category":"Persistence","value":"Account Manipulation (Additional Cloud Credentials )","id":"F-3.1.03.","description":"The adversary may modify cloud accounts by adding a new set of credentials. Having adversary-controlled credentials in the cloud accounts allows adversaries to have persistent access to the targeted system. For example, one of the ways to accomplish adding an SSH key is in AWS - using ImportKeyPair or CreateKeyPair API, and in GCP -  gcloud compute os-login ssh-keys add command. \n\nSource: https://attack.mitre.org/techniques/T1098/001/"},{"category":"Privilege Escalation","value":"Exploitation for Privilege Escalation","id":"F-4.2.03.","description":"The adversary may perform a privilege escalation to get admin access to the system. In containerized environments, there are a plethora of ways to conduct a privilege escalation, such as listing secrets to get the admin secret, impersonating a privileged group, exploiting the control plane, for example, Kubernetes API server or kublet, to get access to admin secrets.\n\nSource: https://attack.mitre.org/techniques/T1068/\nhttps://blog.lightspin.io/kubernetes-pod-privilege-escalation"},{"category":"Defense Evasion","value":"Modify Cloud Compute Infrastructure","id":"F-5.1.03. ","description":"The adversary may modify cloud compute infrastructure, that can include creating spanshots, creating, deleting and reverting cloud instances. Modifying infractructure may \n\nSource: https://attack.mitre.org/techniques/T1578/"},{"category":"Credential Access","value":"Forge Web Credentials","id":"F-6.1.03. ","description":""},{"category":"Discovery","value":"Account Discovery","id":"F-7.1.03. ","description":""},{"category":"Lateral Movement","value":"Taint Shared Content","id":"F-8.1.03. ","description":""},{"category":"Collection","value":"Data Staged (Remote Data Staging)","id":"F-9.1.03. ","description":""},{"category":"Exfiltration","value":"Transfer Data from Git Repository","id":"F-10.3.03. ","description":""},{"category":"Impact","value":"Resource Hijacking","id":"F-11.0.03. ","description":""},{"category":"Initial Access","value":"Exploit Public-Facing Application","id":"F-0.1.04.","description":"The adversary may try to compromise an application or devise facing the internet to bring unexpected behavior. In cloud baser or containerized environments, it can cause taking advantage of the underlying infrastructure. This makes it possible for adversaries to access container API or container host.  \n\nSource: https://attack.mitre.org/techniques/T1190/"},{"category":"Execution","value":"Scheduled Task/Job (Container Orchestration Job)","id":"F-1.2.04.","description":"The adversary may compromise job scheduling in containerized environments. It can be used to schedule the deployment of a container that executes malicious code. Container job scheduling works similarly to the Cron Job in Linux, thus performing defined tasks in a designated time. \n\nCronJob in Kubernetes can be used to schedule a specific Job, for example, a Job that executes a malicious code in the pods of a cluster.  \n\nSource: https://attack.mitre.org/techniques/T1053/007/ "},{"category":"Persistence","value":"Create Account","id":"F-3.1.04.","description":"The adversary may create a new account to keep persistent access to the target system. In cloud environments, adversaries can add accounts to a specific service to reduce detection risk.\n\nSource: https://attack.mitre.org/techniques/T1136/003/"},{"category":"Privilege Escalation","value":"Scheduled Task/Job (Container Orchestration Job)","id":"F-4.2.04.","description":"The adversary may compromise job scheduling in containerized environments. It can be used to schedule the deployment of a container that executes malicious code. Container job scheduling works similarly to the Cron Job in Linux, thus performing defined tasks in a designated time. \n\nCronJob in Kubernetes can be used to schedule a specific Job, for example, a Job that executes a malicious code in the pods of a cluster.  \n\nSource: https://attack.mitre.org/techniques/T1053/007/ "},{"category":"Defense Evasion","value":"Unused/Unsupported Cloud Regions","id":"F-5.1.04.","description":""},{"category":"Credential Access","value":"Steal Application Access Token. ","id":"F-6.1.04.","description":""},{"category":"Discovery","value":"Cloud Infrastructure Discovery","id":"F-7.1.04.","description":""},{"category":"Lateral Movement","value":"Writable Volume Mounts on the Host","id":"F-8.2.04.","description":""},{"category":"Collection","value":"Images from a Private Registry","id":"F-9.2.04.","description":""},{"category":"Exfiltration","value":"Exfiltrate Data in Production Environment","id":"F-10.3.04.","description":""},{"category":"Impact","value":"Data Encrypted for Impact","id":"F-11.1.04.","description":""},{"category":"Initial Access","value":"Compromised Images in Registry","id":"F-0.2.05.","description":"The adversary may attempt to add a compromised image to the private registry given its access. Or they can add compromised images to a public register, like Docker Hub, and expect the user to use an untrusted image. \n\nSource: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/ "},{"category":"Execution","value":"SSH Server (running inside container)","id":"F-1.2.05.","description":"The adversary may compromise the running SSH server inside on container. Having legitimate credentials gained by phishing or brute-forcing, an adversary may remotely access a container. \n\nSource: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/"},{"category":"Persistence","value":"External Remote Services","id":"F-3.2.05.","description":"The adversary may access the system via external remote services (e.g., VPNs), which allows them to connect from the remote location to the system. In the case of containerized environments, there are sensitive interfaces that are not meant to be exposed publicly. But sometimes due to misconfigured environments, they can be exposed. As they don't require authentication adversaries can use them to deploy a container or run malicious code. Examples of those interfaces are Docker API, Kubernetes API server, kublet, Kubeflow. \n\nSource: https://attack.mitre.org/techniques/T1133/ https://www.microsoft.com/security/blog/2021/03/23/secure-containerized-environments-with-updated-threat-matrix-for-kubernetes/\n"},{"category":"Privilege Escalation","value":"Privilleged Container","id":"F-4.2.05.","description":"The adversary may get access to or deploy a privileged container. A privileged container has permission to do a wide variety of actions on the host. Thus, by gaining access to it, the adversary may modify the host and get access to the admin information and resources and the containers located on the same host. \n\nSource: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/\nhttps://cloud.redhat.com/blog/protecting-kubernetes-against-mitre-attck-privilege-escalation?extIdCarryOver=true&sc_cid=7013a000002pdO9AAI"},{"category":"Defense Evasion","value":"Use Alternate Authentication Material (Web Session Cookie)","id":"F-5.1.05.","description":""},{"category":"Credential Access","value":"Steal Web Session Cookie","id":"F-6.1.05.","description":""},{"category":"Discovery","value":"Cloud and Container Service Dashboard (Access K8s dashboard )","id":"F-7.1.05.","description":""},{"category":"Lateral Movement","value":"CoreDNS Poisoning","id":"F-8.2.05.","description":""},{"category":"Impact","value":"Defacement","id":"F-11.1.05.","description":""},{"category":"Initial Access","value":"Kubeconfig File (exfiltrated, or uploaded to the wrong place)","id":"F-0.1.06. ","description":"The adversary may access a kubeconfig file that is exfiltrated, uploaded to the wrong place, or via the compromised client. Having a kubeconfig file gives adversary details about the cluster, such as credentials. Thus, it can be used for accessing the cluster.\n\nSource: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/ "},{"category":"Execution","value":"Sidecar Injection","id":"F-1.2.06.","description":"The adversary may inject a sidecar container in the legitimate pod of the cluster to avoid adding a new pod. In Kubernetes pod is one or a group of containers in the shared network. A sidecar container is a container that exists next to the main container in the pod. \n\nSource: https://www.microsoft.com/security/blog/2021/03/23/secure-containerized-environments-with-updated-threat-matrix-for-kubernetes/ "},{"category":"Persistence","value":"Scheduled Task/Job (K8s CronJob )","id":"F-3.2.06.","description":"The adversary may compromise job scheduling in containerized environments. It can be used to schedule the deployment of a container that executes malicious code. Container job scheduling works similarly to the Cron Job in Linux, thus performing defined tasks in a designated time. \nCronJob in Kubernetes can be used to schedule a specific Job, for example, a Job that executes a malicious code in the pods of a cluster.  \n\nSource: https://attack.mitre.org/techniques/T1053/007/ \n"},{"category":"Privilege Escalation","value":"Cluster-admin Binding","id":"F-4.2.06.","description":"The adversary may create a binding to the privileged or admin role if they gain permission to create bindings. A role binding allows to give permissions specific to the role to the user or group of users and is an initial part of Role-based access control (RBAC) in Kubernetes.   \n\nSources: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/\nhttps://cloud.redhat.com/blog/protecting-kubernetes-against-mitre-attck-privilege-escalation?extIdCarryOver=true&sc_cid=7013a000002pdO9AAI\nhttps://kubernetes.io/docs/reference/access-authn-authz/rbac/"},{"category":"Defense Evasion","value":"Build Image on Host","id":"F-5.2.06.","description":""},{"category":"Credential Access","value":"Cloud Instance Metadata API","id":"F-6.1.06.","description":""},{"category":"Discovery","value":"Cloud Service Discovery","id":"F-7.1.06.","description":""},{"category":"Lateral Movement","value":"ARP Poisoning and IP Spoofing","id":"F-8.2.06.","description":""},{"category":"Impact","value":"PII or IP Exfiltration (cluster or cloud datastores, local accounts)","id":"F-11.2.06.","description":""},{"category":"Initial Access","value":"Compromise User Endpoint (2FA and federating auth mitigate)","id":"F-0.2.07.","description":""},{"category":"Execution","value":"Application Exploit (RCE)","id":"F-1.2.07.","description":""},{"category":"Persistence","value":"Host Mount (Writable hostPath mount )","id":"F-2.2.07.","description":"The adversary may mount a file or folder to a target container using hostPath volume. It's used to mount a file/folder from a host machine to a container and can be exploited by adversaries to get persistent access to the host machine. \n\nSource: https://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/"},{"category":"Privilege Escalation","value":"Access Cloud Resources (metadata attack via workload identity)","id":"F-3.2.07.","description":""},{"category":"Defense Evasion","value":"Indicator Removal on Host (Clear container logs, Delete K8s events  )","id":"F-4.2.07.","description":""},{"category":"Credential Access","value":"Access Container Service Account","id":"F-5.2.07.","description":""},{"category":"Discovery","value":"Cloud Storage Object Discovery","id":"F-6.1.07.","description":""},{"category":"Lateral Movement","value":"Container Service Account (API server)","id":"F-7.2.07.","description":""},{"category":"Initial Access","value":"Compromised Host (credentials leak/stuffing, unpatched services, supply chain compromise)","id":"F-0.2.08.","description":""},{"category":"Execution","value":"Container Lifecycle Hooks (postStart and preStop events in pod YAML)","id":"F-1.2.08.","description":""},{"category":"Persistence","value":" Backdoor Container","id":"F-2.2.08.","description":"The adversary may use Kubernetes controllers (Deployments or DaemonSets) to have a constantly running container in the cluster, that can execute a malicious code. \n\nSource: https://cloud.redhat.com/blog/protecting-kubernetes-against-mitre-attck-persistence?extIdCarryOver=true&sc_cid=7013a000002pdO9AAI \n\nhttps://www.microsoft.com/security/blog/2020/04/02/attack-matrix-kubernetes/"},{"category":"Privilege Escalation","value":"Pod hostPath Mount (logs to container breakout)","id":"F-3.2.08.","description":""},{"category":"Defense Evasion","value":"Masquerading (Pod/container name similarity )","id":"F-4.2.08.","description":""},{"category":"Credential Access","value":"Admission controller. Sub: Malicious admission controller, Compromise Admission Controllers.","id":"F-5.2.08.","description":""},{"category":"Discovery","value":"System Network Connections Discovery","id":"F-6.1.08.","description":""},{"category":"Lateral Movement","value":"Access Cloud Resources (workload identity and cloud integrations)","id":"F-7.2.08.","description":""},{"category":"Initial Access","value":"Compromised etcd (missing auth)","id":"F-0.3.09.","description":""},{"category":"Execution","value":"Remote Services (SSH to CI/CD pipeline) ","id":"F-1.3.09.","description":"The adversary may use an SSH to connect to the CI/CD pipeline. If CI/CD pipeline has allowed SSH access and the adversary gained valid credentials, the adversary can access the CI/CD pipeline servers. \n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Persistence","value":"Static Pods (reverse shell, shadow API server to read audit-log-only headers)","id":"F-2.2.09.","description":""},{"category":"Privilege Escalation","value":"Node to Cluster Escalation (stolen credentials, node label rebinding attack)","id":"F-3.2.09.","description":""},{"category":"Defense Evasion","value":"RootKit","id":"F-4.2.09.","description":""},{"category":"Credential Access","value":"Credential Access (Get credential from CI/CD Admin Console)","id":"F-5.3.09.","description":""},{"category":"Discovery","value":"Password Policy Discovery","id":"F-6.1.09.","description":""},{"category":"Lateral Movement","value":"Cluster Internal Networking (attack neighboring pods or systems)","id":"F-7.2.09.","description":""},{"category":"Initial Access","value":"K8s API Server Vulnerability (needs CVE and unpatched API server)","id":"F-0.2.10.","description":""},{"category":"Execution","value":"CI/CD Configuration (Modify CI/CD Configuration)","id":"F-1.3.10.","description":"The adversary may modify CI/CD configurations. When CI/CD configurations on the Git repository are allowed without review, Git allows pushing unsigned commits,  or there is no signature to CI/CD configurations, an adversary can change configurations. Weak audit login can help them remain undetected. \n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Persistence","value":"Rewrite Container Lifecycle Hooks (postStart and preStop events in pod YAML)","id":"F-2.2.10.","description":""},{"category":"Privilege Escalation","value":"Control Plane to Cloud Escalation (keys in Secrets, cloud or control plane credentials)","id":"F-3.2.10.","description":""},{"category":"Defense Evasion","value":"Connect from Proxy Server (to cover source IP, external to cluster)","id":"F-4.2.10.","description":""},{"category":"Discovery","value":"Software Discovery (Security Software Discovery)","id":"F-6.1.10.","description":""},{"category":"Lateral Movement","value":"Access K8s Dashboard","id":"F-7.2.10.","description":""},{"category":"Execution","value":"Production Environment Configuration (Modify the configuration of Production environment)","id":"F-1.3.11.","description":"The adversary may modify the configuration of the production environment by having valid credentials. For example, when credentials in the system are not rotated regularly and don't follow the least privilege principle, compromising a secret manager and stealing credentials adversary can modify the production environment. \n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Persistence","value":"Rewrite Liveness Probes (exec into and reverse shell in container)","id":"F-2.2.11.","description":""},{"category":"Privilege Escalation","value":"Compromise Admission Controller (reconfigure and bypass to allow blocked image with flag)","id":"F-3.2.11.","description":""},{"category":"Defense Evasion","value":"Dynamic Resolution (DNS) (DNS tunneling/exfiltration)","id":"F-4.2.11.","description":""},{"category":"Discovery","value":"System Information Discovery","id":"F-6.1.11.","description":""},{"category":"Lateral Movement","value":"Access tiller endpoint (Helm v3 negates this)","id":"F-7.2.11.","description":""},{"category":"Execution","value":"Supply Chain Compromise on CI/CD","id":"F-1.3.12.","description":"The adversary may exploit the weakest/less secure link in the CI/CD pipeline. Mainly targeted areas are exploits on widely used open-source packages, open-source vulnerabilities, compromised CI/CD tools, and changes in the build process.  \n\nIn 2021 suply chain attacks increased by 300% compared to 2020 based on the Aqua \"2021 Software Supply Chain Security Report\".\n\nSource: https://blog.aquasec.com/software-supply-chain-attacks-2021\n \n"},{"category":"Persistence","value":"Shadow Admission Control or API Server (privileged RBAC, reverse shell)","id":"F-2.2.12.","description":""},{"category":"Privilege Escalation","value":"Compromise K8s Operator (compromise flux and read any Secrets)","id":"F-3.2.12.","description":""},{"category":"Defense Evasion","value":"Shadow Admission Control or API Server","id":"F-4.2.12.","description":""},{"category":"Discovery","value":"Container and Resource Discovery","id":"F-6.2.12.","description":""},{"category":"Lateral Movement","value":"Access K8s Operator","id":"F-7.2.12.","description":""},{"category":"Execution","value":"Modify Production Environment (deploy modified applications or server images to production environment)","id":"F-1.3.13.","description":"The adversary may deploy modified applications or server images in the production environment by having valid credentials. For example, when credentials in the system are not rotated regularly and don't follow the least privilege principle, compromising a secret manager and stealing credentials, the adversary can deploy modified applications or container images, functions, and VM images to the production environment. \n\nSource: https://github.com/rung/threat-matrix-cicd\n"},{"category":"Persistence","value":"K3d Botnet (secondary cluster running on compromised nodes)","id":"F-2.2.13.","description":""},{"category":"Privilege Escalation","value":"Container Breakout (kernel or runtime vulnerability e.g., DirtyCOW, `/proc/self/exe`, eBPF verifier bugs, Netfilter)","id":"F-3.2.13.","description":""},{"category":"Defense Evasion","value":"Implant CI/CD Runner Image","id":"F-4.3.13.","description":"The adversary may implant a malicious container image into CI/CD pipeline to achieve persistence. Weak audit login can help an adversary remain undetected. \n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Discovery","value":"Instance metadata API ","id":"F-6.2.13.","description":""},{"category":"Lateral Movement","value":"Privilege Escalation in CI/CD ","id":"F-7.3.13.","description":""},{"category":"Execution","value":"Injection to IaC Configuration, to Source Code, Bad Dependency.","id":"F-1.3.14.","description":"The adversary may inject code to IaC configuration, inject source code, or a bad dependency. For example, in the CI stage adversary can change the application to execute a test code on Ci if the policy of code doesn't restrict a dangerous code. Adversaries can inject bad dependency if untrusted libraries and tools are not restricted. And an adversary can inject code to IaC (Infrastructure as code), that is defines as using machine-readable files to manage data centers. For example, via Terraform as it allows code execution and adding of files. \n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Persistence","value":"Implant CI/CD Runner Image","id":"F-2.3.14.","description":"The adversary may implant a malicious container image into CI/CD pipeline to achieve persistence. Weak audit login can help an adversary remain undetected. \n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Privilege Escalation","value":"Privilege Escalation in CI/CD","id":"F-3.3.14.","description":"The adversary may escalate privilages from the CI/CD environment to other comonents of the system, if CI/CD pipeline is not isolated from other systems. \n\nSource: https://github.com/rung/threat-matrix-cicd "},{"category":"Defense Evasion","value":"CI/CD Caches (Modify Caches of CI/CD) ","id":"F-4.3.14.","description":""},{"category":"Discovery","value":"Access the Kubernetes, Kubelet API","id":"F-6.2.14.","description":""},{"category":"Lateral Movement","value":"Remote Services Exploitation","id":"F-8.3.13.","description":"The adversary may escalate privilages from the CI/CD environment to other comonents of the system, if CI/CD pipeline is not isolated from other systems. \n\nSource: https://github.com/rung/threat-matrix-cicd "},{"category":"Persistence","value":"Compromise CI/CD Server","id":"F-2.3.15.","description":"The adversary may compromise CI/CD server from a pipeline, espesially if the enviroment created on the pipeline run is not cleaned up after every run. \n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Defense Evasion","value":"Implant Approver in CI/CD  (Add Approver  using Admin permission in CI/CD)","id":"F-4.3.15.","description":""},{"category":"Discovery","value":"Compromise K8s Operator (sensitive RBAC)","id":"F-6.2.15.","description":""},{"category":"Persistence","value":"CI/CD Configuration (Modify CI/CD Configuration)","id":"F-2.3.16.","description":"The adversary may modify CI/CD configurations. When CI/CD configurations on the Git repository are allowed without review, Git allows pushing unsigned commits,  or there is no signature to CI/CD configurations, an adversary can change configurations. Weak audit login can help them remain undetected. \n\nSource: https://github.com/rung/threat-matrix-cicd"},{"category":"Defense Evasion","value":"Bypass Review","id":"F-4.3.16.","description":""},{"category":"Discovery","value":"Access host filesystem (host mounts)","id":"F-6.2.16.","description":""},{"category":"Persistence","value":"Injection to IaC Configuration, to Source Code, Bad Dependency.","id":"F-2.3.17.","description":"The adversary may inject code to IaC configuration, inject source code, or a bad dependency. For example, in the CI stage adversary can change the application to execute a test code on Ci if the policy of code doesn't restrict a dangerous code. Adversaries can inject bad dependency if untrusted libraries and tools are not restricted. And an adversary can inject code to IaC (Infrastructure as code), that is defines as using machine-readable files to manage data centers. For example, via Terraform as it allows code execution and adding of files. \n\nSource: https://github.com/rung/threat-matrix-cicd\n"},{"category":"Defense Evasion","value":"Access Secret Manager (Access to Secret Manager from CI/CD kicked by different repository)","id":"F-4.3.17.","description":""}]